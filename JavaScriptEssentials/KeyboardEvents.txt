Skip to main content
Code Institute Home PageCodeInstitute: CPJS_06_20
JavaScript Essentials
 Dashboard for:kellyjona@gmail.com 
PROGRAMME OVERVIEW
STUDENT SUPPORT
 GITPOD
 SLACK
JavaScript & the DOM  Handling DOM Events  Keyboard Events
Search in Module
 Previous
Next 
other Click Events 
problem Click Events Challenge 
other Mouse Movements & Scrolling 
problem Mouse Movements & Scrolling Challenge 
other Loading Events 
problem Loading Events Challenge 
other Change Events 
problem Change Events Challenge 
other Keyboard Events 
problem Keyboard Events Challenge 
other Adding Event Listeners 
problem Adding Event Listeners Challenge 
other Working With JavaScript Functions 
problem Working With JavaScript Functions Challenge 
Keyboard Events
 Bookmark this page
WHAT ARE THEY?

Keyboard events in JavaScript.

 
WHAT DO THEY DO?

Capture when a user has pressed or released a key on the keyboard.

 
HOW DO YOU USE THEM?

By capturing the event and executing some code in response.



Keyboard Events

headings graphics
So far you've learned how to capture mouse events, loading events, and change events. Another way users interact with websites is via their keyboards, and those events can be captured as well. All events that occur when user presses a key on the keyboard belong to the KeyboardEvent object and this object has a number of properties and methods similar to the MouseEvent object. The most common keyboard events you will capture are:

onkeypress: A user has pressed a key on the keyboard
onkeydown: A user has pressed a key down, but not released it yet
onkeyup: A user has released a key which was previously pressed down
By capturing these three events and combining them with the other properties and methods available on the KeyboardEvent object, it's possible not only to tell whether a user has pressed a key on the keyboard, but also to tell how long they held it down, specifically which key was pressed, whether they've released it yet and more. This makes it possible for you to add interactivity to your pages that executes not only for simple things like clicking but also for complex situations like, "The user clicked and dragged while holding ctrl + alt" or "the user has pressed shift + I". This is often how popular websites you probably use every day create all those awesome keyboard and clicking shortcuts! Here is a table summarizing all the possible KeyboardEvent properties and methods. To access these, you can pass the event parameter to your event handler function (the function that gets called when the event happens) as described in the mouse movements and scrolling unit, then access them using dot notation (e.g. event.key):

Property/Method	Description
altKey	Returns whether the "ALT" key was pressed when the key event was triggered
charCode	Returns the Unicode character code of the key that triggered the event
code	Returns the code of the key that triggered the event
ctrlKey	Returns whether the "CTRL" key was pressed when the key event was triggered
getModifierState()	Returns true if the specified key is activated
isComposing	Returns whether the state of the event is composing or not
key	Returns the key value of the key represented by the event
keyCode	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event
location	Returns the location of a key on the keyboard or device
metaKey	Returns whether the "meta" key was pressed when the key event was triggered
repeat	Returns whether a key is being hold down repeatedly, or not
shiftKey	Returns whether the "SHIFT" key was pressed when the key event was triggered
which	Returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event
The following runnable example demonstrates the functionality of JavaScript keyboard events. Here are some things to think about as you work through the code:

What's the purpose of passing the event parameter to the handleKeys() function in index.html?
What do you think would happen if you eliminated the if(event.repeat) block on lines 9-11 of script.js that returns false?
Can you think of another way to write lines 15 and 27? Maybe using template literals?
Why do we need lines 23-25 in script.js? What would happen if you removed it or changed 75 to 1000?

Runnable Example



Expand

 Previous
Next 
AboutTerms and ConditionsPrivacy PolicyPlagiarism PolicyFAQÂ© 2021 Code Institute.