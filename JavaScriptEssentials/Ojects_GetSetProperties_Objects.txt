Skip to main content
Code Institute Home PageCodeInstitute: CPJS_06_20
JavaScript Essentials
 Dashboard for:kellyjona@gmail.com 
Code Institute Logo
PROGRAMME OVERVIEW
STUDENT SUPPORT
 GITPOD
 SLACK
JavaScript-Specific Core Concepts  Working With JavaScript Data Structures  Getting & Setting Object Properties
Search in Module
 Previous
Next 
other Arrays 
other Array Indexing 
problem Array indexing Challenge 
other Array Methods 
problem Array Methods Challenge 
other Objects 
problem Objects Challenge 
other Computed Property names 
other Getting & Setting Object Properties 
problem Getting & Setting Object Properties Challenge 
other Object Methods 
other The 'this' Keyword 
problem The 'this' Keyword Challenge 
other Iterating Data Structures 
problem Iterating Data Structures Challenge 
other Nested Data Structures 
problem Nested Data Structures Challenge 
Getting & Setting Object Properties
 Bookmark this page
WHAT IS IT?

Getting and setting properties on JavaScript objects.

 
WHAT DOES IT DO?

Allows you to create, read, update and delete properties on JavaScript objects.

 
HOW DO YOU USE IT?

Using dot notation or square bracket notation.



Getting & Setting Object Properties

headings graphics
Just like you can create, read, update and delete elements of an array, you can do the same with JavaScript objects. While arrays use indexes to identify their elements, the values of a JavaScript object are identified by their property names. You can access these property names using either square bracket notation (myObject['someProperty']) or dot notaton (myObject.someProperty), though the latter is the preferred way in modern JavaScript.

JavaScript objects are like a dictionary. Each word in a real dictionary should only appear once, but the same definition might apply to multiple words (in other words there are some words that may be different words that mean the same thing). In the case of a JavaScript object, each property must only appear once and must be unique, however the same value can appear more than once, as long as it has a different property name. This is an example of a JavaScript object representing a person:

let person = {
  firstName: 'John',
  lastName: 'Smith',
  age: 30,
  location: 'USA'
}
There are four things we can do with this person object:

Read its properties
Create new properties
Update its existing properties
Delete its properties
All four of these are quite simple. To read an object property, you can use either square bracket or dot notation. Both are the same, but the latter is preferred:

let person = {
  firstName: 'John',
  lastName: 'Smith',
  age: 30,
  location: 'USA'
};
console.log(person['firstName']);  // 'John'
console.log(person.lastName);  // 'Smith'
Run this code
To give an object a new property, you can use the same notation, but set the value at the same time:

let person = {
  firstName: 'John',
  lastName: 'Smith',
  age: 30,
  location: 'USA'
};
person['bestFriend'] = 'Mike';
console.log(person['bestFriend']);  // 'Mike'

person.wife = 'Mary';
console.log(person.wife);  // 'Mary'

console.log(person);
Run this code
To update an existing property you can use the same syntax as creating a new value; just do it on an existing property to overwrite it:

let person = {
  firstName: 'John',
  lastName: 'Smith',
  age: 30,
  location: 'USA'
};
person['age'] = 31;
console.log(person['age']);  // 31

person.location = 'Spain';
console.log(person.location);  // 'Spain'
Run this code
Finally, to delete an object property you can use the delete operator:

let person = {
  firstName: 'John',
  lastName: 'Smith',
  age: 30,
  location: 'USA'
};
delete person['lastName'];
delete person.age;
console.log(person);
Run this code
Note: Trying to access a property which doesn't exist will not throw an error; it will return undefined. Technically, any property that doesn't exist on an object will be undefined, so while accessing a property that has been deleted will still return undefined, if you log the object to the console the property is gone. For all intents and purposes, deleting an object property does effectively remove the property from the object.

 Previous
Next 
AboutTerms and ConditionsPrivacy PolicyPlagiarism PolicyFAQÂ© 2021 Code Institute.