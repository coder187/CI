Skip to main content
Code Institute Home PageCodeInstitute: CPJS_06_20
JavaScript Essentials
 Dashboard for:kellyjona@gmail.com 
Code Institute Logo
PROGRAMME OVERVIEW
STUDENT SUPPORT
 GITPOD
 SLACK
JavaScript-Specific Core Concepts  Working With JavaScript Data Structures  Array Methods
Search in Module
 Previous
Next 
other Arrays 
other Array Indexing 
problem Array indexing Challenge 
other Array Methods 
problem Array Methods Challenge 
other Objects 
problem Objects Challenge 
other Computed Property names 
other Getting & Setting Object Properties 
problem Getting & Setting Object Properties Challenge 
other Object Methods 
other The 'this' Keyword 
problem The 'this' Keyword Challenge 
other Iterating Data Structures 
problem Iterating Data Structures Challenge 
other Nested Data Structures 
problem Nested Data Structures Challenge 
Array Methods
 Bookmark this page
WHAT ARE THEY?

Array methods in JavaScript.

 
WHAT DO THEY DO?

Perform various operations on JavaScript arrays.

 
HOW DO YOU USE THEM?

By declaring an array and then calling a method on it.

let cars = ['saab', 'volvo', 'ford'];
cars.push('chevy');


Array Methods

headings graphics
Along with their properties like length, arrays have a number of built-in methods for performing various operations on them. Some of the most common operations you might perform on arrays using these methods include:

Popping and pushing elements
Shifting and unshifting elements
Deleting and splicing elements
Changing the values of specific elements
Slicing, sorting and merging
Testing whether an array includes an element
Mapping and reducing
These terms won't all make sense to you right now and there are other methods besides the ones listed here, but once you know a few of them you'll find it easy to understand the rest.

Let's go through each of the list items above. For all of these examples we'll use the same array so you can easily see the differences and the functionality of each method:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
Popping and pushing elements:
You can pop an item off the end of an array, or push one or more onto the end of it using the pop() and push() methods respectively. The pop() method returns the item you popped off and the push() method returns the new length of the array, if you assign them to a variable:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
let lastItem = fruits.pop();

console.log(lastItem);
console.log(fruits);

let newLength = fruits.push('mangoes');
console.log(newLength);
console.log(fruits);
Run this code
Shifting and unshifting elements:
While the pop() method pops an item off the end of the array, you can pop an item off the front of the array using the shift() method. It returns the item you "shifted". Likewise, you can add one or more items to the beginning of the array using the unshift() method:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
let firstItem = fruits.shift();

console.log(firstItem);
console.log(fruits);

let newLength = fruits.unshift('mangoes');
console.log(newLength);
console.log(fruits);
Run this code
Deleting and splicing elements:
You might think that you can delete an item by passing its index to the delete keyword:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
delete fruits[2];
console.log(fruits);
Run this code
If you run the code though, you'll see it doesn't actually delete the item, it replaces it with undefined. The correct way to truly delete a specific item in an array is to use the splice() method. To use splice, you specify the index you would like to begin at and the number of items you want to remove:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
fruits.splice(2, 1);  // Remove one item starting at index 2
console.log(fruits);
Run this code
Changing the values of specific elements:
You can also use splice() to insert elements into the array at the starting index, by specifying the elements you want to insert in a comma-separated list after the 2nd argument:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];

// Remove 'cherries', insert 'pineapples' and 'mangoes'
// 'bananas' is shifted to the right
fruits.splice(2, 1, 'pineapples', 'mangoes');
console.log(fruits);
Run this code
The above removes one element, starting at index 2 and then inserts two new elements starting at that position. The splice() element returns an array of the inserted or deleted elements. If you don't want to replace any items, but just want to splice some items into the array starting at a specific point, you can specify 0 for the second argument:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];

// Insert 'pineapples' and 'mangoes' starting at index 2
// 'cherries' is shifted to the right
fruits.splice(2, 0, 'pineapples', 'mangoes');
console.log(fruits);
Run this code
If you simply want to change the value of an existing element, you can do it directly by replacing its index with the new value:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
fruits[2] = 'pineapples';
console.log(fruits);
Run this code
Slicing, sorting and merging:
You can also slice an array to obtain a subset of it by using the slice() method. The following slices the array and returns only indices 2 through 4 (not including 4). This does not modify the original array:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
let subset = fruits.slice(2, 4);
console.log(fruits);
console.log(subset);
Run this code
The sort() method will sort the array, by default, from lowest to highest or in alphabetical order. The sorting methodology will differ based on the contents of the array, but usually you will use this to sort numerically or alphabetically:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
fruits.sort();
console.log(fruits);
Run this code
You can merge two arrays together using the concat()method (short for concatenate which you might remember from the string lessons means "to link things together in a chain or a series"). Just pass one or more arrays into it to merge them all together:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
let vegetables = ['carrots', 'peas', 'beans', 'lettuce'];
let healthyFoods = fruits.concat(vegetables);

console.log(fruits);
console.log(vegetables);
console.log(healthyFoods);
Run this code
Testing whether an array includes an element:
If you need to know whether a specific element exists in an array, you can test it using the includes() method, which will return true if the element exists in the array, and false otherwise:

let fruits = ['apples', 'pears', 'cherries', 'bananas', 'peaches', 'oranges'];
let hasApples = fruits.includes('apples');  // true
let hasMangoes = fruits.includes('mangoes');  // false
console.log(hasApples);
console.log(hasMangoes);
Run this code
Mapping, filtering and reducing:
There are three other methods that are commonly used with arrays, but you'll need to learn more about functions and the rest of JavaScript before you can understand how they work. In the meantime, cache these away in your memory bank; they're quite handy and a great thing to Google when you inevitably need to manipulate arrays in more complex ways!

.map(): executes a given function on every single element of the array. An example might be capitalizing all the elements of an array, or multipling them all by some number.
.filter(): filters the array down to only elements that meet specific criteria. An example might be filtering a list of names down to only names that begin with a certain letter.
.reduce(): reduces all the array elements down to a single result based on a given formula. An example might be reducing an array of numbers down to their sum, by addng them all together.
As you can see there are many methods and ways to work with arrays. To learn more about these methods you can explore the MDN Website. You don't need to memorize every single one. Instead try to focus on remembering all the possible things you might want to do with an array, like adding/removing elements, sorting elements, combining arrays together, plucking certain elements out of them and so on. By focusing on the possibilities you're more likely to know what to search for when you need to accomplish a task. Googling "How to sort a JavaScript array" will most definitely lead you to the sort() method, and that can point you to the documentation which can refresh your memory on how to actually use it, so knowing what you want to accomplish is the most important part!

 Previous
Next 
AboutTerms and ConditionsPrivacy PolicyPlagiarism PolicyFAQÂ© 2021 Code Institute.